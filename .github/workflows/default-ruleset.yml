name: Configure Branch Protection Rulesets

on:
  schedule:
    # Run the workflow every hour
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  configure_ruleset:
    runs-on: ubuntu-latest

    steps:
    - name: Convert App token
      id: create_token 
      uses: getsentry/action-github-app-token@v3.0.0
      with:
        app_id: ${{ vars.FSDH_REPO_ADMIN_APP_ID }}
        private_key: ${{ secrets.FSDH_REPO_ADMIN_APP_KEY }}

    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Set up GitHub CLI
      run: gh auth login --with-token <<< "${{ steps.create_token.outputs.token }}"

    - name: Apply or update rulesets
      env:
        GH_TOKEN: ${{ steps.create_token.outputs.token }}
      run: |
        for file in .github/workflows/branch-rulesets/*.json; do
          # Extract the name of the ruleset from the JSON file
          ruleset_name=$(jq -r '.name' "$file")
          
          # Check if the ruleset already exists in GitHub
          existing_ruleset_id=$(gh api "repos/${{ github.repository }}/rulesets" --jq ".[] | select(.name == \"$ruleset_name\") | .id")

          if [ -n "$existing_ruleset_id" ]; then
            # Update the existing ruleset with PUT
            echo "Updating ruleset $ruleset_name with ID $existing_ruleset_id"
            gh api "repos/${{ github.repository }}/rulesets/$existing_ruleset_id" \
              --method PUT \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              --input "$file" || exit 1
          else
            # Create a new ruleset if it doesn't exist
            echo "Creating new ruleset $ruleset_name"
            gh api "repos/${{ github.repository }}/rulesets" \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              --input "$file" || exit 1
          fi
        done

    - name: Cleanup unused rulesets
      env:
        GH_TOKEN: ${{ steps.create_token.outputs.token }}
      run: |
        # Get a list of all rulesets that exist in GitHub, one per line
        existing_rulesets=$(gh api "repos/${{ github.repository }}/rulesets" --jq '.[] | .name' --raw-output)

        # Loop through the existing rulesets, handling names with spaces safely
        echo "$existing_rulesets" | while IFS= read -r ruleset_name; do
          # Check if this ruleset has a corresponding file in the local ruleset folder
          if [ ! -f ".github/workflows/branch-rulesets/${ruleset_name}.json" ]; then
            # If the file does not exist, delete the ruleset from GitHub
            echo "Deleting unused ruleset: $ruleset_name"
            ruleset_id=$(gh api "repos/${{ github.repository }}/rulesets" --jq ".[] | select(.name == \"$ruleset_name\") | .id")
            gh api "repos/${{ github.repository }}/rulesets/$ruleset_id" \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" || exit 1
          fi
        done